def copyDockerImages(String imageName) {
  sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com"
  sh "docker pull ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:intg"
  sh "docker tag ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:intg ${env.SANDBOX_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:sbox"
  sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${env.SANDBOX_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com"
  sh "docker push ${env.SANDBOX_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:sbox"
}

def initialiseTerraform() {
  sh "git clone https://github.com/nationalarchives/tdr-terraform-modules.git"
  sh "git clone https://github.com/nationalarchives/tdr-terraform-environments.git"
  sh "terraform init"
  sh "terraform workspace new sbox || true"
  sh "terraform workspace select sbox"
}

pipeline {
  agent {
    label "built-in"
  }
  parameters {
    booleanParam(name: 'CREATE_RESOURCES', defaultValue: false)
    booleanParam(name: 'DESTROY_RESOURCES', defaultValue: false)
    string(name: 'FILES', defaultValue: '')
  }

  stages {
    stage('Run Terrraform build in Sandbox environment') {
      agent {
        ecs {
          inheritFrom "terraform"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRTerraformAssumeRoleSbox"
        }
      }
      when {
        beforeAgent true
        expression { params.CREATE_RESOURCES }
      }
      environment {
        TF_VAR_tdr_account_number = "${env.SANDBOX_ACCOUNT}"
        TF_CLI_ARGS = "-no-color"
      }
      steps {
        dir("terraform") {
          initialiseTerraform()
          retry(5) {
            sh "terraform apply --auto-approve"
          }
        }
      }
    }
    stage('Build docker images in sandbox environment') {
      when {
        beforeAgent true
        expression { params.CREATE_RESOURCES }
      }
      steps {
//        copyDockerImages("consignment-api")
        copyDockerImages("auth-server")
        copyDockerImages("file-format-build")
      }
    }
    stage('Create resources and run test') {
      agent {
        ecs {
          inheritFrom "transfer-frontend"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRTerraformAssumeRoleSbox"
        }
      }
      when {
        beforeAgent true
        expression { !params.DESTROY_RESOURCES && params.FILES != '' }
      }
      steps {
        script {
          if(params.CREATE_RESOURCES) {
            sh "sbt -no-colors 'run -cr ${params.FILES}'"
          } else {
            sh "sbt -no-colors 'run -r ${params.FILES}'"
          }
        }
        publishHTML (target: [
            keepAll: true,
            reportDir: "report",
            reportFiles: 'output.html',
            reportName: "Performance Checks Report"
        ])
      }
    }
    stage('Remove deletion protection') {
      agent {
        ecs {
          inheritFrom "transfer-frontend"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRTerraformAssumeRoleSbox"
        }
      }
      when {
        beforeAgent true
        expression { params.DESTROY_RESOURCES }
      }
      steps {
        script {
          sh "sbt -no-colors 'run -d ${params.FILES}'"
        }
      }
    }
    stage('Run Terraform destroy in Sandbox environment') {
      agent {
        ecs {
          inheritFrom "terraform"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRTerraformAssumeRoleSbox"
        }
      }
      when {
        beforeAgent true
        expression { params.DESTROY_RESOURCES }
      }
      environment {
        TF_VAR_tdr_account_number = "${env.SANDBOX_ACCOUNT}"
        TF_CLI_ARGS = "-no-color"
      }
      steps {
        dir("terraform") {
          initialiseTerraform()
          retry(5) {
            sh "terraform destroy --auto-approve"
          }
        }
      }
    }
  }
}
