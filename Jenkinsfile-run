def copyDockerImages(String imageName) {
  sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com"
  sh "docker pull ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:intg"
  sh "docker tag ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:intg ${env.SANDBOX_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:sbox"
  sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${env.SANDBOX_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com"
  sh "docker push ${env.SANDBOX_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${imageName}:sbox"
}

pipeline {
  agent {
    label "built-in"
  }
  parameters {
    booleanParam(name: 'RUN_TERRAFORM', defaultValue: false)
  }

  stages {
    stage('Run Terraform build') {
      agent {
        ecs {
          inheritFrom "terraform"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRTerraformAssumeRoleSbox"
        }
      }
      when {
        beforeAgent true
        expression { params.RUN_TERRAFORM }
      }
      environment {
        TF_VAR_tdr_account_number = "${env.SANDBOX_ACCOUNT}"
        TF_CLI_ARGS = "-no-color"
      }
      stages {
        stage('Set up Terraform workspace') {
          steps {
            dir("terraform") {
              sh "git clone --branch changes-for-performance-checks https://github.com/nationalarchives/tdr-terraform-modules.git"
              sh "git clone --branch changes-for-performance-checks https://github.com/nationalarchives/tdr-terraform-environments.git"
              sh "terraform init"
              sh "terraform workspace new sbox || true"
              sh "terraform workspace select sbox"
              retry(5) {
                sh "terraform apply --auto-approve"
              }
            }
          }
        }
      }
    }
    stage('Build docker images in sandbox environment') {
      steps {
        copyDockerImages("consignment-api")
        copyDockerImages("auth-server")
        copyDockerImages("file-format-build")
//        publishHTML (target: [
//            keepAll: true,
//            reportFiles: 'output.html',
//            reportName: "Performance Checks Report"
//        ])
      }
    }
  }
}